@article{Mohsin2019,
   abstract = {Existing security specification languages are not fully equipped to express low-level security requirements and design decisions such as input validation (a security requirement for a number of highly severe vulnerabilities). This inability of current specification languages compels developers to make security-related decisions on their own. We propose, a new security specification language named UML-SR using the extension mechanism of UML. UML-SR is based upon security requirements that need to be used to avoid the some of the most severe vulnerabilities according to the Common Vulnerability Scoring System of the National Vulnerability Database. UML-SR enhances UML use case, activity, class, and sequence diagrams with security requirements such as input validation, multi-factor authentication, closing port after an interval of inactivity, checking privileges, allowing only whitelisted commands, checking parameters passed when calling a function, session expiration check on the server side, and password aging. In this paper, we use stereotypes, constraints, and tags to represent these security requirements as a case study.},
   author = {Muhammad Mohsin and Muhammad Umair Khan},
   doi = {10.1109/QRS.2019.00051},
   isbn = {9781728139272},
   journal = {Proceedings - 19th IEEE International Conference on Software Quality, Reliability and Security, QRS 2019},
   keywords = {Low level security requirements,UML extension,secure design decisions,security specification languages,vulnerabilities},
   month = {7},
   pages = {342-349},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {UML-SR: A Novel Security Requirements Specification Language},
   year = {2019},
}
@article{Viriyasitavat2012,
   abstract = {Advanced technologies have changed the nature of business processes in the form of services. In coordinating services to achieve a particular objective, service workflow is used to control service composition, execution sequences as well as path selection. Since existing mechanisms are insufficient for addressing the diversity and dynamicity of the requirements in a large-scale distributed environment, developing formal requirements specification is necessary. In this paper, we propose a Service Workflow Specification language, called SWSpec, which allows arbitrary services in a workflow to formally and uniformly impose their requirements. As such, the solution will provide a formal way to regulate and control workflows as well as enrich the proliferation of service provisions and consumptions in opened environments. © 2005-2012 IEEE.},
   author = {Wattana Viriyasitavat and Li Da Xu and Andrew Martin},
   doi = {10.1109/TII.2011.2182519},
   issn = {15513203},
   issue = {3},
   journal = {IEEE Transactions on Industrial Informatics},
   keywords = {Enterprise systems,service,service industry,service industry informatics,specification language,workflow},
   pages = {631-638},
   title = {SWSpec: The requirements specification language in service workflow environments},
   volume = {8},
   year = {2012},
}
@article{Glinz2000,
   abstract = {In recent years, UML has become a standard language for modeling software requirements and design. In this paper we investigate the suitability of UML as a semiformal requirements specification language. Using the Teleservices and Remote Medical Care (TRMCS) case study as an example, we identify and demonstrate various problems and deficiencies of UML, particularly concerning use case models and system decomposition. We also investigate whether and how the deficiencies can be overcome and how potential alternatives could look.},
   author = {Martin Glinz},
   doi = {10.1109/IWSSD.2000.891122},
   isbn = {0769508847},
   journal = {10th International Workshop on Software Specification and Design, IWSSD 2000},
   keywords = {Decomposition,Model,Requirements specification,UML,Use case},
   pages = {11-22},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Problems and deficiencies of UML as a requirements specification language},
   year = {2000},
}
@article{Tremper2021,
   abstract = {Objectives Pseudonymization is an important aspect of projects dealing with sensitive patient data. Most projects build their own specialized, hard-coded, solutions. However, these overlap in many aspects of their functionality. As any re-implementation binds resources, we would like to propose a solution that facilitates and encourages the reuse of existing components. Methods We analyzed already-established data protection concepts to gain an insight into their common features and the ways in which their components were linked together. We found that we could represent these pseudonymization processes with a simple descriptive language, which we have called MAGICPL, plus a relatively small set of components. We designed MAGICPL as an XML-based language, to make it human-readable and accessible to nonprogrammers. Additionally, a prototype implementation of the components was written in Java. MAGICPL makes it possible to reference the components using their class names, making it easy to extend or exchange the component set. Furthermore, there is a simple HTTP application programming interface (API) that runs the tasks and allows other systems to communicate with the pseudonymization process. Results MAGICPL has been used in at least three projects, including the re-implementation of the pseudonymization process of the German Cancer Consortium, clinical data flows in a large-scale translational research network (National Network Genomic Medicine), and for our own institute's pseudonymization service. Conclusions Putting our solution into productive use at both our own institute and at our partner sites facilitated a reduction in the time and effort required to build pseudonymization pipelines in medical research.},
   author = {Galina Tremper and Torben Brenner and Florian Stampe and Andreas Borg and Martin Bialke and David Croft and Esther Schmidt and Martin Lablans},
   doi = {10.1055/S-0041-1731387/ID/JR20010120-24},
   issn = {2511705X},
   issue = {1-2},
   journal = {Methods of Information in Medicine},
   keywords = {data protection,process description language,pseudonymization},
   month = {5},
   pages = {21-31},
   pmid = {34225374},
   publisher = {Georg Thieme Verlag},
   title = {MAGICPL: A Generic Process Description Language for Distributed Pseudonymization Scenarios},
   volume = {60},
   url = {http://www.thieme-connect.de/products/ejournals/html/10.1055/s-0041-1731387 http://www.thieme-connect.de/DOI/DOI?10.1055/s-0041-1731387},
   year = {2021},
}
@article{,
   abstract = {People prefer to use textual specification of requirements, but their representations are not suitable for automatic transformation and reuse. Use case modelling is commonly used to structure and document requirements. The integration of use cases within the Model Driven Development paradigm requires a rigorous definition of the use case specification. In this paper we describe the key part of SilabReq language for requirements specification based on use case and present the main result from our preliminary experience with implementation of the SilabReq language with JetBrains Meta Programming System.},
   author = {Dušan Savić and Alberto Rodrigues Da Silva and Siniša Vlajić and Saša Lazarević and Ilija Antović and Vojislav Stanojević and Miloš Milić},
   doi = {10.1109/QUATIC.2014.24},
   isbn = {9781479961337},
   journal = {Proceedings - 2014 9th International Conference on the Quality of Information and Communications Technology, QUATIC 2014},
   keywords = {language workbench,requirements,requirements specification,requirements specification tools,use case},
   month = {12},
   pages = {134-137},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Preliminary experience using JetBrains MPS to implement a requirements specification language},
   year = {2014},
}
@article{Yan2009,
   abstract = {For the complexity and miniaturization of MEMS, MEMS design process is extremely different from general mechanical design process. Commonly the design flow is dominated by "trial-and-error" methods. It is necessary to describe design process of MEMS for reuse. This will help to reduce the number of redesigns and thus decrease the time to market. Based on XML and necessary extensions being made, a MEMS design process description language, called MDPDL, is presented and the syntax and implementation are discussed in detail. The Document Type Definition (DTD) is adopted to define the syntax rules for the tags of MDPDL, considering core activities and related resources of MEMS design process. Finally, an implementation case has been given out to illustrate the efficiency of MDPDL.},
   author = {Xiangtong Yan and Pingyu Jiang},
   doi = {10.4028/WWW.SCIENTIFIC.NET/AMM.16-19.358},
   isbn = {978-0-87849-299-2},
   issn = {1662-7482},
   journal = {Applied Mechanics and Materials},
   keywords = {Design Process,Document Type Definition,Extensible Markup Language XML,MDPDL (MEMS Design Process Description Language),Micro-Electromechanical System (MEMS)},
   pages = {358-362},
   publisher = {Trans Tech Publications Ltd},
   title = {Design and Implementation of a MEMS Design Process Description Language- MDPDL},
   volume = {16-19},
   url = {https://www.scientific.net/AMM.16-19.358},
   year = {2009},
}
@article{Yan2009,
   abstract = {<p>For the complexity and miniaturization of MEMS, MEMS design process is extremely different from general mechanical design process. Commonly the design flow is dominated by “trial-and-error” methods. It is necessary to describe design process of MEMS for reuse. This will help to reduce the number of redesigns and thus decrease the time to market. Based on XML and necessary extensions being made, a MEMS design process description language, called MDPDL, is presented and the syntax and implementation are discussed in detail. The Document Type Definition (DTD) is adopted to define the syntax rules for the tags of MDPDL, considering core activities and related resources of MEMS design process. Finally, an implementation case has been given out to illustrate the efficiency of MDPDL.</p>},
   author = {Xiang Tong Yan and Ping Yu Jiang},
   doi = {10.4028/www.scientific.net/AMM.16-19.358},
   isbn = {978-0-87849-299-2},
   issn = {1662-7482},
   journal = {Applied Mechanics and Materials},
   keywords = {Design Process,Document Type Definition,Extensible Markup Language XML,MDPDL (MEMS Design Process Description Language),Micro-Electromechanical System (MEMS)},
   month = {10},
   pages = {358-362},
   publisher = {Trans Tech Publications Ltd},
   title = {Design and Implementation of a MEMS Design Process Description Language- MDPDL},
   volume = {16-19},
   url = {https://www.scientific.net/AMM.16-19.358},
   year = {2009},
}
@article{Spooner1998,
   abstract = {Maintaining stable, robust, and consistent software is difficult in face of the increasing rate of change of customers' preferences, materials, manufacturing techniques, computer equipment, and other characteristic features of manufacturing systems. It is argued that software is commonly difficult to keep up to date because many of the implications of these changing features on software details are obscure. A possible solution is to use a software generation system in which the transformation of system properties into system software is made explicit. The proposed generation system stores the system properties, such as machine properties, product properties and information on manufacturing techniques, in databases. As a result this information, on which system control is based, can also be made available to other programs. In particular, artificial intelligence programs such as fault diagnosis programs, can benefit from using the same information as the control system, rather than a separate database which must be developed and maintained separately to ensure consistency. Experience in developing a simplified model of such a system is presented.},
   author = {Natalie R. Spooner and G. Alan Creak},
   doi = {10.1117/12.326928},
   issn = {0277786X},
   journal = {https://doi.org/10.1117/12.326928},
   keywords = {Aluminum,Computer programming,Computing systems,Control systems,Databases,Diagnostics,Manufacturing,Process control,Product engineering,Sensors},
   month = {10},
   pages = {227-238},
   publisher = {SPIE},
   title = {Process description language: an experiment in robust programming for manufacturing systems},
   volume = {3517},
   url = {https://www.spiedigitallibrary.org/conference-proceedings-of-spie/3517/0000/Process-description-language--an-experiment-in-robust-programming-for/10.1117/12.326928.full https://www.spiedigitallibrary.org/conference-proceedings-of-spie/3517/0000/Process-description-language--an-experiment-in-robust-programming-for/10.1117/12.326928.short},
   year = {1998},
}
